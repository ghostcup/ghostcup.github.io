<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Ghost in the Cup</title>
		<link>https://bloggie.boilingcong.ee/posts/</link>
		<description>Recent content in Posts on Ghost in the Cup</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 09 Jan 2021 02:07:37 +0800</lastBuildDate>
		<atom:link href="https://bloggie.boilingcong.ee/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>调整 Elasticsearch 分配的 Heap Size</title>
			<link>https://bloggie.boilingcong.ee/posts/elasticsearch-heap-size-settings-configure/</link>
			<pubDate>Sat, 09 Jan 2021 02:07:37 +0800</pubDate>
			
			<guid>https://bloggie.boilingcong.ee/posts/elasticsearch-heap-size-settings-configure/</guid>
			<description>&lt;p&gt;今天在&lt;a href=&#34;https://boilingcong.ee/@gfis/105519076282661135&#34;&gt;吐槽纸吸管&lt;/a&gt;之前，在 Mastodon 搜索「纸吸管」，准备连上&lt;a href=&#34;https://boilingcong.ee/@gfis/105508559072549583&#34;&gt;之前的吐槽&lt;/a&gt;形成一个 thread。但没有出来任何搜索结果。查看了一下服务器 Elasticsearch 的运行状态：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo service elasticsearch status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;随之发现处于 &lt;code&gt;inactive&lt;/code&gt;，同时报错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Jan 08 07:20:22 boilingcong elasticsearch[31559]: # There is insufficient memory for the Java Runtime Environment to continue.
Jan 08 07:20:22 boilingcong elasticsearch[31559]: # Native memory allocation (mmap) failed to map 986513408 bytes for committing reserved memory.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原来是我可怜的内存只剩下 900 多 MB free，报错信息和&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html#heap-size-settings&#34;&gt;查询结果&lt;/a&gt;都显示这并不满足 Elasticsearch 默认分配堆的大小：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, Elasticsearch tells the JVM to use a heap with a minimum and maximum size of 1 GB.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随后又有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Elasticsearch will assign the entire heap specified in &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/jvm-options.html&#34;&gt;jvm.options&lt;/a&gt; via the &lt;code&gt;Xms&lt;/code&gt; (minimum heap size) and &lt;code&gt;Xmx&lt;/code&gt; (maximum heap size) settings. These two settings must be equal to each other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其在 &lt;code&gt;jvm.options&lt;/code&gt; 里：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-Xms1g
-Xmx1g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以我们需要通过添加 &lt;code&gt;/etc/elasticsearch/jvm.options.d/custom.options&lt;/code&gt; 或者直接修改&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;的方式将其更改成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-Xms512m
-Xmx512m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;并重新启动：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo service elasticsearch restart
&lt;/code&gt;&lt;/pre&gt;</description>
			<content type="html"><![CDATA[<p>今天在<a href="https://boilingcong.ee/@gfis/105519076282661135">吐槽纸吸管</a>之前，在 Mastodon 搜索「纸吸管」，准备连上<a href="https://boilingcong.ee/@gfis/105508559072549583">之前的吐槽</a>形成一个 thread。但没有出来任何搜索结果。查看了一下服务器 Elasticsearch 的运行状态：</p>
<pre><code>sudo service elasticsearch status
</code></pre><p>随之发现处于 <code>inactive</code>，同时报错：</p>
<pre><code>Jan 08 07:20:22 boilingcong elasticsearch[31559]: # There is insufficient memory for the Java Runtime Environment to continue.
Jan 08 07:20:22 boilingcong elasticsearch[31559]: # Native memory allocation (mmap) failed to map 986513408 bytes for committing reserved memory.
</code></pre><p>原来是我可怜的内存只剩下 900 多 MB free，报错信息和<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html#heap-size-settings">查询结果</a>都显示这并不满足 Elasticsearch 默认分配堆的大小：</p>
<blockquote>
<p>By default, Elasticsearch tells the JVM to use a heap with a minimum and maximum size of 1 GB.</p>
</blockquote>
<p>随后又有：</p>
<blockquote>
<p>Elasticsearch will assign the entire heap specified in <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/jvm-options.html">jvm.options</a> via the <code>Xms</code> (minimum heap size) and <code>Xmx</code> (maximum heap size) settings. These two settings must be equal to each other.</p>
</blockquote>
<p>其在 <code>jvm.options</code> 里：</p>
<pre><code>-Xms1g
-Xmx1g
</code></pre><p>所以我们需要通过添加 <code>/etc/elasticsearch/jvm.options.d/custom.options</code> 或者直接修改<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>的方式将其更改成：</p>
<pre><code>-Xms512m
-Xmx512m
</code></pre><p>并重新启动：</p>
<pre><code>sudo service elasticsearch restart
</code></pre><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>不过注意<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/jvm-options.html">文档</a>说「You should never need to modify the root <code>jvm.options</code> file instead preferring to use custom JVM options files.」 <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></content>
		</item>
		
		<item>
			<title>利用 Hugo 建立静态博客并通过 GitHub Pages 部署</title>
			<link>https://bloggie.boilingcong.ee/posts/hugo-site-with-github-pages-hosted/</link>
			<pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
			
			<guid>https://bloggie.boilingcong.ee/posts/hugo-site-with-github-pages-hosted/</guid>
			<description>&lt;h1 id=&#34;assumptions-about-audience&#34;&gt;Assumptions about Audience&lt;/h1&gt;
&lt;p&gt;本「教程」乃为女友之便所写，故&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设阅读者具有使用命令行工具的基本能力。（或许有帮助：&lt;a href=&#34;https://missing.csail.mit.edu/2020/course-shell/#navigating-in-the-shell&#34;&gt;Navigating in the shell&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;假设操作环境为 macOS Mojave/Big Sur。&lt;/li&gt;
&lt;/ol&gt;</description>
			<content type="html"><![CDATA[<h1 id="assumptions-about-audience">Assumptions about Audience</h1>
<p>本「教程」乃为女友之便所写，故</p>
<ol>
<li>假设阅读者具有使用命令行工具的基本能力。（或许有帮助：<a href="https://missing.csail.mit.edu/2020/course-shell/#navigating-in-the-shell">Navigating in the shell</a>）</li>
<li>假设操作环境为 macOS Mojave/Big Sur。</li>
</ol>
<h1 id="pre-requisites">Pre-requisites</h1>
<h2 id="安装-homebrew">安装 Homebrew</h2>
<p><a href="https://brew.sh">Homebrew</a> 是 macOS 广为流行的包管理器。我们使用它来安装 Git、Hugo 及更多工具。</p>
<p>很便利地就可以安装它：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</code></pre></div><h2 id="安装-git">安装 Git</h2>
<p><a href="https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F">Git</a> 是一个分布式版本管理工具，我们使用它来管理项目（在此例中也就是博客）版本。</p>
<p>使用前步骤安装的 Homebrew 安装它：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">brew install git
</code></pre></div><h2 id="注册-github-帐号并添加-ssh-key-到账户">注册 GitHub 帐号并添加 SSH Key 到账户</h2>
<p>GitHub 是一个用以支持版本管理和合作开发的代码代管服务平台。我们需要用它来存放站点文件以及使用它的 GitHub Pages 服务来发布我们的博客。</p>
<p><a href="https://github.com/join">Join GitHub - Create your account</a></p>
<p>如果此前未生成过 SSH Keys（可以<a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/checking-for-existing-ssh-keys">检查</a>），<a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">生成新的 SSH Key 并加入 ssh-agent</a>。<a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account">将 SSH Key 加入 GitHub 账户</a>。</p>
<h2 id="创建-github-repositories">创建 GitHub Repositories</h2>
<p>在此步骤中我们需要<a href="https://github.com/new">创建</a>两个 repos，一个用来通过 GitHub Pages 部署静态博客，一个用来储存站点源文件。</p>
<ol>
<li>创建一个用来部署 GitHub Pages 的 repo，命名为 <code>&lt;USERNAME&gt;.github.io</code>。</li>
<li>创建一个储存站点源文件的 repo，命名为 <code>blog</code>。</li>
</ol>
<h2 id="初次运行-git-前的配置">初次运行 Git 前的配置</h2>
<p>为 Git 配置用户名和邮件地址：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">git config --global user.name <span class="s2">&#34;&lt;USERNAME&gt;&#34;</span> <span class="c1"># GitHub username</span>
git config --global user.email &lt;EMAIL&gt; <span class="c1"># GitHub 注册邮箱</span>
</code></pre></div><h2 id="准备域名optional">准备域名（Optional）</h2>
<p>如要使用定制域名（custom domain），可参考 <a href="https://tld-list.com">tld-list.com/</a> 挑选并购买域名。</p>
<p>此处假设我们购买了域名，并已通过 <a href="https://letsencrypt.org/getting-started/">Let&rsquo;s Encrypt</a> 或 <a href="https://www.cloudflare.com/ssl/">Cloudflare Free SSL/TLS</a> 等途径为其获取了 SSL 证书（如果不确定的话可以<a href="https://crt.sh/">检查</a>）。</p>
<h1 id="安装-hugo-并在本地启用">安装 Hugo 并在本地启用</h1>
<h2 id="安装-hugo">安装 Hugo</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">brew install hugo
</code></pre></div><p>检查安装是否成功以及其版本：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">hugo version
</code></pre></div><p>得到类似的结果说明安装已经成功，并指示了 Hugo 的版本：</p>
<pre><code>Hugo Static Site Generator v0.80.0-792EF0F4/extended darwin/amd64 BuildDate: 2020-12-31T13:44:15Z
</code></pre><h2 id="生成站点文件">生成站点文件</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~/Documents <span class="c1"># 这里我们将 blog 目录放置在 Documents/ 下，请按需修改</span>
git clone git@github.com:&lt;USERNAME&gt;/blog.git
</code></pre></div><p>首先 clone <code>blog</code> repo 到本地。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">hugo new site hugo_tmp
<span class="nb">cd</span> hugo_tmp <span class="o">&amp;&amp;</span> cp -R . ../blog <span class="o">&amp;&amp;</span> <span class="nb">cd</span> .. <span class="o">&amp;&amp;</span> rm -rf hugo_tmp
</code></pre></div><p>生成站点文件，并将站点文件转移到其中，这样我们就获得了一个存放站点文件的本地 repo <code>blog</code>。</p>
<p>接下来的操作（命令）主要都是以 <code>blog</code> 目录为根基执行，以 <code>.</code> 表示，比如 <code>./data</code> 代表 <code>blog</code> 目录下的 <code>data</code> 目录。相关文档中，如果看到 <em>site&rsquo;s root</em> 或 <em>project&rsquo;s root</em> 等等都指的是此<strong>站点目录</strong>。</p>
<h2 id="添加主题">添加主题</h2>
<p>这里使用女友选中的主题 <a href="https://themes.gohugo.io/hugo-theme-hello-friend-ng/">Hello Friend NG</a> 作为例子，可以到 <a href="https://themes.gohugo.io/">themes.gohugo.io/</a> 或者按照项目 Git Stars 排序的 <a href="https://hugoranked.com/">hugoranked.com/</a> 处查看更多的 Hugo 主题。</p>
<p>从 GitHub 获取主题，以 <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">submodule</a> 形式添加到 <code>./themes</code> 目录：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> blog
git submodule add thttps://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng
</code></pre></div><h2 id="修改站点配置">修改站点配置</h2>
<p>将主题提供的模板站点配置复制到站点根目录：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">cp themes/hello-friend-ng/exampleSite/config.toml .
</code></pre></div><p>为了后续使用 GitHub Pages 发布，我们需要修改 <code>config.toml</code> 中 <code>baseurl</code> 的值。</p>
<p>如果准备直接使用 <code>&lt;USERNAME&gt;.github.io</code> 作为域名，将 <code>baseurl</code> 的值修改为 <code>https://&lt;USERNAME&gt;.github.io</code> 。如果准备使用定制域名，将 <code>baseurl</code> 的值修改为 <code>https://&lt;YOURDOMAIN&gt;</code> 或 <code>http://&lt;YOURDOMAIN&gt;</code>（如果域名没有 SSL 证书）。</p>
<p>可能还需要按自己的需求修改其他的值，例如 <code>title</code>、<code>name</code> 之类。</p>
<h2 id="创建文章">创建文章</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">hugo new posts/my-first-post.md
</code></pre></div><p>新文章（名为 <code>my-first-post.md</code> 的 Markdown 文件）会被创建在 <code>./content/posts</code> 下。</p>
<p>写入一些内容：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s2">&#34;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&#34;</span> &gt;&gt; content/posts/my-first-post.md
</code></pre></div><h2 id="本地启动-hugo-服务器">本地启动 Hugo 服务器</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">hugo server -D <span class="c1"># -D 令 drafts 在编写与校对中可见。后续将站点部署上线，drafts 不会出现在 posts 中。</span>
</code></pre></div><p>可在 <a href="http://localhost:1313/">http://localhost:1313/</a> 于本地查看站点页面、修改并实时观察变动。按下 Ctrl + C 中止。</p>
<h1 id="撰写文章">撰写文章</h1>
<h2 id="编辑-markdown-文件">编辑 Markdown 文件</h2>
<p>推荐使用 <a href="https://typora.io/">Typora</a> 编辑器，它移除了预览窗口，主打的特性是无缝（从 syntax 转换到样式文本）、所见即所想的编辑体验。</p>
<h2 id="front-matter">Front Matter</h2>
<p><a href="https://gohugo.io/content-management/front-matter/">front matter</a> 出现在每篇文章的开头，允许你将 metadata（比如 <code>categories</code>、<code>date</code>、<code>tags</code>、<code>title</code>）附在内容文件之中，Hugo 通过这些信息生成、组织、归类你的文章。</p>
<p>它可以由四种不同的格式完成，这里我们以 yaml 格式为例。yaml 格式的 front matter 以 <code>---</code> 包裹。将以下代码放在文章（Markdown 文件）的最开头将给文章提供 metadata，不同的 front matter variables 提供的信息可查看<a href="https://gohugo.io/content-management/front-matter/#front-matter-variables">具体说明</a>。</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">categories</span><span class="p">:</span><span class="w">
</span><span class="w"></span>- <span class="l">Tech</span><span class="w">
</span><span class="w"></span>- <span class="l">Programming</span><span class="w">
</span><span class="w"></span><span class="nt">date</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2020-12-21&#34;</span><span class="w">
</span><span class="w"></span><span class="nt">slug</span><span class="p">:</span><span class="w"> </span><span class="l">why-ruby-is-the-best-pl</span><span class="w">
</span><span class="w"></span><span class="nt">tags</span><span class="p">:</span><span class="w">
</span><span class="w"></span>- <span class="l">ruby</span><span class="w">
</span><span class="w"></span>- <span class="l">programming-language</span><span class="w">
</span><span class="w"></span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="l">Ruby is Best</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span></code></pre></div><p>注意，通过 <code>hugo new posts/...</code> 生成的新文章已经包含了默认的 front matter，你可以直接进行增添及修改。</p>
<h1 id="部署到-github-pages">部署到 GitHub Pages</h1>
<h2 id="准备事项">准备事项</h2>
<p>将此前生成的 <code>public</code> 目录删除：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">rm -rf public
</code></pre></div><p>将我们作为 GitHub Pages 部署的 repo clone 到本地，命名为 <code>public</code>。这样后续使用 <code>hugo</code> 生成的静态文件将全部存放在此目录，并且拥有一个 remote origin 指向我们的 GitHub Pages repo。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">git submodule add git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git public
</code></pre></div><p>如果使用 custom domain 的话，需要将域名写入 <code>CNAME</code> 文件并将其放置在 GitHub Pages repo 之中：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s2">&#34;&lt;YOURDOMAIN&gt;&#34;</span> &gt; static/CNAME
</code></pre></div><p>同时，在 DNS 管理中添加一条 CNAME record：</p>
<pre><code>Name:    &lt;YOURDOMAIN&gt;
Content: &lt;USERNAME&gt;.github.io
</code></pre><h2 id="脚本化发布流程">脚本化发布流程</h2>
<p>完整的发布步骤需要执行好几条命令，所以我们将其放在一个脚本中，并在之后的部署中直接调用它。</p>
<p>首先创建一个脚本 <code>deploy.sh</code>，并将它通过相应的应用打开（可能是 TextEdit 或其他文本编辑器）：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">touch deploy.sh
open deploy.sh
</code></pre></div><p>将以下代码粘贴到其中：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/sh
</span><span class="cp"></span>
<span class="nb">set</span> -e <span class="c1"># If a command fails then the deploy stops</span>
<span class="nb">printf</span> <span class="s2">&#34;\033[0;32mDeploying updates to GitHub...\033[0m\n&#34;</span>
hugo <span class="c1"># Build a site to the ./public directory</span>
<span class="nb">cd</span> public
git add . <span class="c1"># Add all changes to git</span>

<span class="c1"># Commit changes</span>
<span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Rebuild site </span><span class="k">$(</span>date<span class="k">)</span><span class="s2">&#34;</span>
<span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="nv">$*</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
	<span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$*</span><span class="s2">&#34;</span>
<span class="k">fi</span>
git commit -m <span class="s2">&#34;</span><span class="nv">$msg</span><span class="s2">&#34;</span>

<span class="c1"># Push source and build repos</span>
git push origin master

<span class="c1"># Commit all changes of project files and push</span>
<span class="nb">cd</span> ..
git add .
git commit -m <span class="s2">&#34;Update blog files&#34;</span>
git push origin master
</code></pre></div><p>最后，给予 <code>deploy.sh</code> 可执行权限：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">chmod +x deploy.sh
</code></pre></div><h2 id="发布">发布</h2>
<p>每次需要发布，通过执行 <code>deploy.sh</code>：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">./deploy.sh
</code></pre></div><p>如果你有额外的 commit message：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">./deploy.sh <span class="s2">&#34;&lt;YOUR OPTIONAL COMMIT MESSAGE&gt;&#34;</span>
</code></pre></div><p>如此，我们每一次执行「发布」，<code>public</code> 内文件将被推送至 GitHub Pages repo，然后新版本的博客将会被部署。随后，<code>blog</code> repo 将会存放你新的站点文件，这方便于备份以及在新的工作环境中重新创建并启用一个博客目录。</p>]]></content>
		</item>
		
		<item>
			<title>讓我們逃到綠色裡去──評《言葉之庭》</title>
			<link>https://bloggie.boilingcong.ee/posts/review-of-the-garden-of-words/</link>
			<pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://bloggie.boilingcong.ee/posts/review-of-the-garden-of-words/</guid>
			<description>&lt;p&gt;略乏戲劇性的劇本其實本來就未經斧鑿，正如男女主角的外形那般樸實無華，但推進得非常自然。只拍了 46 分鐘，廢篇不多，空鏡頭綿柔瑰麗，當作短小精悍的影視畫集欣賞也未嘗不可。&lt;/p&gt;
&lt;p&gt;畫面裡反覆出現的 Docomo 大廈，屹立在淡灰色的背景之中，頂著東京天際線的一格，彷彿懸浮著的「此處仍是城市」的橫幅，將這一信息不失融洽地黏附在空靈意境的邊緣，透露出新宿御苑作為一個城市裡的綠色公園，象徵著男女主角的精神綠洲。他們都是生活在城市裡的普普通通的居民，對未來充滿了「典型」的困惑──在學業和理想之間掙扎的 15 歲少年，對工作和人生充滿迷茫的 27 歲老師，從灰暗繁雜的都市（現實）裡，「逃離」到一個被油綠包圍的小亭（精神的棲息之處），遇見了彼此。&lt;/p&gt;
&lt;p&gt;不覺得這是「狗血」的妄想愛情故事，也認為相比故事線，此片更著重於塑造一個具有整體感的氛圍，而畫作上的高超也有效支撐了這個灰色天幕下綠色世界的構建。男女主角之間，人生階段不同導致的距離感也是不至決絕但隱含畏懼和剋制，傾心愛意的滋生和釋放都恰到好處。劇作對這段感情的編寫，未落入俗套的幻想，也不放入絕望的瓶中，換句話說，沒有通過淺顯的手法操控觀眾，而只是像攝錄雨後的小亭瓦簷那樣，觀察水花自由地濺落。它不是編排宏大、段落有序的羅曼蒂克大作，只是一篇清新淡然的都市人心靈互救寫實小記。&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>略乏戲劇性的劇本其實本來就未經斧鑿，正如男女主角的外形那般樸實無華，但推進得非常自然。只拍了 46 分鐘，廢篇不多，空鏡頭綿柔瑰麗，當作短小精悍的影視畫集欣賞也未嘗不可。</p>
<p>畫面裡反覆出現的 Docomo 大廈，屹立在淡灰色的背景之中，頂著東京天際線的一格，彷彿懸浮著的「此處仍是城市」的橫幅，將這一信息不失融洽地黏附在空靈意境的邊緣，透露出新宿御苑作為一個城市裡的綠色公園，象徵著男女主角的精神綠洲。他們都是生活在城市裡的普普通通的居民，對未來充滿了「典型」的困惑──在學業和理想之間掙扎的 15 歲少年，對工作和人生充滿迷茫的 27 歲老師，從灰暗繁雜的都市（現實）裡，「逃離」到一個被油綠包圍的小亭（精神的棲息之處），遇見了彼此。</p>
<p>不覺得這是「狗血」的妄想愛情故事，也認為相比故事線，此片更著重於塑造一個具有整體感的氛圍，而畫作上的高超也有效支撐了這個灰色天幕下綠色世界的構建。男女主角之間，人生階段不同導致的距離感也是不至決絕但隱含畏懼和剋制，傾心愛意的滋生和釋放都恰到好處。劇作對這段感情的編寫，未落入俗套的幻想，也不放入絕望的瓶中，換句話說，沒有通過淺顯的手法操控觀眾，而只是像攝錄雨後的小亭瓦簷那樣，觀察水花自由地濺落。它不是編排宏大、段落有序的羅曼蒂克大作，只是一篇清新淡然的都市人心靈互救寫實小記。</p>]]></content>
		</item>
		
		<item>
			<title>谈谈「简中」</title>
			<link>https://bloggie.boilingcong.ee/posts/talking-about-simplified-chinese/</link>
			<pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://bloggie.boilingcong.ee/posts/talking-about-simplified-chinese/</guid>
			<description>&lt;p&gt;諸如「簡中用戶 xxx」的指代法令我反感的原因是給我一種把語言原罪化的感覺。他們通常會用「在語境的加持下，讀者能明白這是在指代哪一個群體」類似的觀點進行辯駁，但我覺得這還是不宜被廣泛接受的用法。&lt;/p&gt;
&lt;p&gt;說「簡中用戶垃圾」比「大陸人垃圾」少了明晃晃的對目標群體的精準指代，但讓它能更順利地被講出（透過字面上的改動，少了那種「自己在辱罵全體大陸人」的心理負擔）。另一個相似的例子是，大家樂於寫「操」而避開「肏」，雖然減弱了其字形上呈現出的粗鄙性，但卻透過降低了說髒字的心理成本，推動了它的泛用性。&lt;/p&gt;
&lt;p&gt;「簡中」相比「大陸籍」，離「人」更遠，後者更是「屬性上的」，而語言只是一個工具。人们好像會避開後者這類更直接具体的指代方式，但考慮語境與聽者實際感受的話，「用筷子的」、「食米饭的」比「亞洲人」的歧視性嚴重得多。歸納某個群體的行爲特性本身，就好像包含一種冒犯性。不當的限定詞，激化了羞辱言論的歧視性，但實際上語言沒有任何罪過，一如常用餐具和饮食习惯沒有罪過。&lt;/p&gt;
&lt;p&gt;語言雖然是呈現觀點的方式，但也有反向在潛意識或顯式思維層面造成影響的功能。例如「滾回去用殘體字」這種羞辱方式，其本質是把對國籍貶損的思想剝離，落到了更脫離「人」本身的「實體」上面（語言）。私認爲包括「簡中用戶」在內的種種用法便是這類攻擊方式被很多人接納、使用的有效推動力之一。&lt;/p&gt;
&lt;p&gt;所以，即使不考慮「簡中」的使用地區裡還包含新馬導致這種用法存在事實錯誤，我認爲，利用「使用的語言」來歸納和特指一個地區/國家的人民群體也是包含些許歧視性的，並會令以此作爲側重點的歧視性言論更有市場。當然，一些大陸人日常需要痛心疾首地辱罵本國及其人民來舒緩壓力和怒氣，也是可以理解的。這樣看來，以包含輕微歧視性的語言評判某個群體大概也算是一種需求，本文僅嘗試對此種用語方式的性質和影響作出分析與評述，不作過多的道德評價。&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>諸如「簡中用戶 xxx」的指代法令我反感的原因是給我一種把語言原罪化的感覺。他們通常會用「在語境的加持下，讀者能明白這是在指代哪一個群體」類似的觀點進行辯駁，但我覺得這還是不宜被廣泛接受的用法。</p>
<p>說「簡中用戶垃圾」比「大陸人垃圾」少了明晃晃的對目標群體的精準指代，但讓它能更順利地被講出（透過字面上的改動，少了那種「自己在辱罵全體大陸人」的心理負擔）。另一個相似的例子是，大家樂於寫「操」而避開「肏」，雖然減弱了其字形上呈現出的粗鄙性，但卻透過降低了說髒字的心理成本，推動了它的泛用性。</p>
<p>「簡中」相比「大陸籍」，離「人」更遠，後者更是「屬性上的」，而語言只是一個工具。人们好像會避開後者這類更直接具体的指代方式，但考慮語境與聽者實際感受的話，「用筷子的」、「食米饭的」比「亞洲人」的歧視性嚴重得多。歸納某個群體的行爲特性本身，就好像包含一種冒犯性。不當的限定詞，激化了羞辱言論的歧視性，但實際上語言沒有任何罪過，一如常用餐具和饮食习惯沒有罪過。</p>
<p>語言雖然是呈現觀點的方式，但也有反向在潛意識或顯式思維層面造成影響的功能。例如「滾回去用殘體字」這種羞辱方式，其本質是把對國籍貶損的思想剝離，落到了更脫離「人」本身的「實體」上面（語言）。私認爲包括「簡中用戶」在內的種種用法便是這類攻擊方式被很多人接納、使用的有效推動力之一。</p>
<p>所以，即使不考慮「簡中」的使用地區裡還包含新馬導致這種用法存在事實錯誤，我認爲，利用「使用的語言」來歸納和特指一個地區/國家的人民群體也是包含些許歧視性的，並會令以此作爲側重點的歧視性言論更有市場。當然，一些大陸人日常需要痛心疾首地辱罵本國及其人民來舒緩壓力和怒氣，也是可以理解的。這樣看來，以包含輕微歧視性的語言評判某個群體大概也算是一種需求，本文僅嘗試對此種用語方式的性質和影響作出分析與評述，不作過多的道德評價。</p>]]></content>
		</item>
		
		<item>
			<title>咚、咚、咚</title>
			<link>https://bloggie.boilingcong.ee/posts/dong-dong-dong/</link>
			<pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
			
			<guid>https://bloggie.boilingcong.ee/posts/dong-dong-dong/</guid>
			<description>&lt;p&gt;晚上在江边散步。江水已经涨到离步道仅有几米距离，树梢露在水面上变成了丛丛灌木。&lt;/p&gt;
&lt;p&gt;江水不断冲打斜壁，发出咚、咚、咚的声音。此前从未听过这样有节奏而有撞击感的声音，未觉得这江有如此的生命力，离得如此之近。晚风不算黏稠，江边亭檐边挂着的排排风铃叮叮作响。钓客不少，他们的作业环境比平时垂直升了许多，但向水面射着绿色光线观察钩饵这一点没有改变。&lt;/p&gt;
&lt;p&gt;写着「防汛」字样的帐篷在桥底支着，如两月前在武汉见到的无数「救灾」帐篷，以一种抵抗的姿态，多少显式化了人的恐惧和坚强。离帐篷不远处，几名年纪看起来参差不齐的萨克斯手演奏着听来不激昂也不悲凉的曲子，没多少情绪从中透露，但继续演奏下去或许就是答案。&lt;/p&gt;
&lt;p&gt;路另一侧，有小艇的引擎轰鸣声，带着斗笠的人或站着抽烟或握着打捞用的网兜，不知赴向何处地从岸边滑出。走过大桥不远，回头望，金色的光流仍延伸，连接着对岸，两边路灯上挂着的灯笼也散着红光，穿梭其中的汽车并未停下。原先通往江边草地的台阶已经只剩下几级了，情侣坐在最上端，拥吻着。&lt;/p&gt;
&lt;p&gt;我突然觉得，即使再怎么糟糕，以群体而言的人类还是应该活着，因为总有人值得活着。不觉间，小艇已快至江心了，江水咚、咚、咚地冲击着岸边。希望一切都好起来。&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>晚上在江边散步。江水已经涨到离步道仅有几米距离，树梢露在水面上变成了丛丛灌木。</p>
<p>江水不断冲打斜壁，发出咚、咚、咚的声音。此前从未听过这样有节奏而有撞击感的声音，未觉得这江有如此的生命力，离得如此之近。晚风不算黏稠，江边亭檐边挂着的排排风铃叮叮作响。钓客不少，他们的作业环境比平时垂直升了许多，但向水面射着绿色光线观察钩饵这一点没有改变。</p>
<p>写着「防汛」字样的帐篷在桥底支着，如两月前在武汉见到的无数「救灾」帐篷，以一种抵抗的姿态，多少显式化了人的恐惧和坚强。离帐篷不远处，几名年纪看起来参差不齐的萨克斯手演奏着听来不激昂也不悲凉的曲子，没多少情绪从中透露，但继续演奏下去或许就是答案。</p>
<p>路另一侧，有小艇的引擎轰鸣声，带着斗笠的人或站着抽烟或握着打捞用的网兜，不知赴向何处地从岸边滑出。走过大桥不远，回头望，金色的光流仍延伸，连接着对岸，两边路灯上挂着的灯笼也散着红光，穿梭其中的汽车并未停下。原先通往江边草地的台阶已经只剩下几级了，情侣坐在最上端，拥吻着。</p>
<p>我突然觉得，即使再怎么糟糕，以群体而言的人类还是应该活着，因为总有人值得活着。不觉间，小艇已快至江心了，江水咚、咚、咚地冲击着岸边。希望一切都好起来。</p>]]></content>
		</item>
		
		<item>
			<title>恐惧针头</title>
			<link>https://bloggie.boilingcong.ee/posts/fear-of-needles/</link>
			<pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
			
			<guid>https://bloggie.boilingcong.ee/posts/fear-of-needles/</guid>
			<description>&lt;p&gt;抽血大概是我最为之恐惧的事。没有经过专业的诊断，但我可能具有「针头恐惧症」部分相似的临床症状。&lt;/p&gt;
&lt;p&gt;形成这种恐惧的原因是幼时体质差得令人诧异，以每周几次为计的就医频率，打了不知道多少针，病历本也不知写完几个。有次发烧到 41 度，在当地的儿童医院吊水，可能因为已神志不清，那一段记忆尤为清晰，在病床上平生第一次看见雪花飘下，外公送我的狮子兽玩具也历历在目。一段称不上创伤但对我伤害颇深的经历是被一名实习护士做皮试，而她好像对于找准血管以及从正确的角度插入针头还不甚熟练。我对此的反应程度是写到这里已经无法继续叙述下去，正如我在写生物试卷时如遇到题干内含有「抽血」二字的题目，会难受得停下来，转为一个自我拥抱的姿势，再把手背与动脉埋进腋下——这样就灭却了幻想出的（在那个场合不存在的）尖锐物体触及他们的可能。&lt;/p&gt;
&lt;p&gt;就在今天，我经历了目前以来最强烈的一次恐惧反应。&lt;/p&gt;</description>
			<content type="html"><![CDATA[<p>抽血大概是我最为之恐惧的事。没有经过专业的诊断，但我可能具有「针头恐惧症」部分相似的临床症状。</p>
<p>形成这种恐惧的原因是幼时体质差得令人诧异，以每周几次为计的就医频率，打了不知道多少针，病历本也不知写完几个。有次发烧到 41 度，在当地的儿童医院吊水，可能因为已神志不清，那一段记忆尤为清晰，在病床上平生第一次看见雪花飘下，外公送我的狮子兽玩具也历历在目。一段称不上创伤但对我伤害颇深的经历是被一名实习护士做皮试，而她好像对于找准血管以及从正确的角度插入针头还不甚熟练。我对此的反应程度是写到这里已经无法继续叙述下去，正如我在写生物试卷时如遇到题干内含有「抽血」二字的题目，会难受得停下来，转为一个自我拥抱的姿势，再把手背与动脉埋进腋下——这样就灭却了幻想出的（在那个场合不存在的）尖锐物体触及他们的可能。</p>
<p>就在今天，我经历了目前以来最强烈的一次恐惧反应。</p>
<p>听到抽血的护士与同事聊天说到「好久没抽了」、「步骤是怎样的来着」，我的心几乎提到嗓子眼，已经进入了上面所说的那种自我防卫之状态，身体止不住地颤抖。虽然那名护士应该确实只是有一段时间没进行抽血工作，手法与操作没出现任何问题，但我的情绪还没有平复下来。在抽血完成的几秒之后，我按着棉签，呼出一口气的同时突然感觉头嗡嗡鸣叫，眼前一黑，走了几步却几乎无法控制落点和步调。被架到沙发上，摘了口罩，像一个需要呼吸机才可以供氧的病人那样大口急促地呼吸着。身边好几名穿着防护服以抵御新型冠状病毒之侵袭的医务人员，那好像是更为严肃的东西，在场出现最严重的症状却是由于我那「小小」的恐惧——可能除了我以外的其他人都觉得滑稽和狼狈吧。花了大概五分钟缓过来，我拒绝了继续坐会儿休息的建议，与母亲一道离开了。</p>
<p>让我觉得沮丧的地方不仅在于我对尖锐物体仍旧无法克服的恐惧，更是他人的不理解。母亲对医务人员的回应是「我以前也这样害怕打针，可能他随着我了」，让我感觉被什么不成文的社会规律轻描淡写地 generalize 了，好像那些让五岁孩童问出「我不晕，我撑着，能不能不去打针」的经历都应该随着「成长」而烟消云散，那些「不正常的恐惧」在达到某一个年龄后就应该被「勇敢」消弭。如果能那样自然最好，但我对此持悲观态度——他们没法想象大学体检时那名给我抽血的老护士看着紧张的我坚定说出「没事，就三秒，蚊子咬。我都做了几十年了。」给予了我多么庞大的安定感。</p>]]></content>
		</item>
		
	</channel>
</rss>
